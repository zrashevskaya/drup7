<?php

/**
 * Implements hook_entity_info().
 */
function d7_custom_entity_info() {

  $info = [];

  $info['d7_custom'] = [
    'label' => t('Custom'),
    'base table' => 'd7_custom',
    'entity class' => 'd7CustomEntity',
    'controller class' => 'd7CustomEntityController',
    'exportable' => TRUE,
    'entity keys' => [
      'id' => 'id',
      'label' => 'name',
      'language' => 'language'
    ],
    'module' => 'd7_custom',
    'access callback' => 'd7_custom_access_callback',

    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
      'path' => 'admin/structure/d7_custom',
      'file' => 'd7_custom.form.inc',
      'controller class' => 'EntityDefaultUIController',
    ),
    'fieldable' => TRUE,
    'bundles' => array(
      'd7_custom' => array(
        'label' => t('Custom Bundle'),
        'admin' => array(
          'path' => 'admin/structure/d7_custom',
        ),
      ),
    ),
    'views controller class' => 'EntityDefaultViewsController',
    'translatable' => TRUE,
    'translation' => array(
      'entity_translation' => array(
        'base path' => 'admin/structure/d7_custom/manage/%d7_custom',
        'path wildcard' => '%d7_custom',
        'default settings' => array(
          'default_language' => LANGUAGE_NONE,
          'hide_language_selector' => FALSE,
        ),
      ),
    ),
  ];

  return $info;
}

/**
 * Implements hook_menu().
 */
function d7_custom_menu() {
  $items = [];

  $items['d7_custom'] = [
    'title' => 'Testing of Custom Entity',
    'file' => 'd7_custom.pages.inc',
    'page callback' => 'd7_custom_callback',
    'access callback' => TRUE,
  ];

  $items['d7_custom/%'] = [
    'title' => 'D7 Custom Entity',
    'file' => 'd7_custom.pages.inc',
    'page callback' => 'd7_custom_demo_view',
    'page arguments' => [1],
    'access arguments' => ['access content'],
  ];

  return $items;
}

/**
 * Access callback for d7 Custom entities.
 */
function d7_custom_access_callback($op, $project = NULL, $account = NULL) {
  if ($op == 'view' || $op == 'update' || $op == 'create' || $op == 'delete') {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Loads a custom-entity by ID.
 */
function d7_custom_load($entity_id) {
  if (empty($entity_id)) {
    return FALSE;
  }

  $entities = d7_custom_load_multiple(array($entity_id), array());
  return $entities ? reset($entities) : FALSE;
}

/**
 * Loads multiple custom-entities by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $entity_ids
 *   An array of entity IDs.
 * @param $conditions
 *   An array of conditions on the {custom_entity} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal custom-entity loading cache.
 *
 * @return
 *   An array of custom-entity objects indexed by entity_id.
 */
function d7_custom_load_multiple($entity_ids = array(), $conditions = array(), $reset = FALSE) {
  if (empty($entity_ids) && empty($conditions)) {
    return array();
  }

  return entity_load('d7_custom', $entity_ids, $conditions, $reset);
}

